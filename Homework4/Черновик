/* Написать программу, определяющую правильность расстановки скобок в выражении.
a+(d*3) - истина
\[a+(1*3) - ложь
\[6+(3*3)] - истина
{a}\[+\]{(d*3)} - истина
<{a}+{(d*3)}> - истина
{a+]}{(d*3)} - ложь */


import java.util.Scanner;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Map;
import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        Deque <String> open = new LinkedList <> ();
        Deque <String> close = new LinkedList <> ();
        String [] symbols = new String [] {"(", "[", "{", "<", ")", "]", "}", ">"};
        System.out.println("Введите выражение для проверки:");
        Scanner sc = new Scanner(System.in);
        String [] inputDsta = sc.nextLine().split("");
        Map <String, Integer> checkOpen = new HashMap <> ();
        Map <String, Integer> checkClose = new HashMap <> ();
        for (int i = 0; i < symbols.length; i++) {
            if (i<symbols.length/2) {
                checkOpen.put(symbols[i],i);
            }
            else {
                checkClose.put(symbols[i],i-symbols.length/2);
            }
        }
        int count = 0;
        for (int i = 0; i < inputDsta.length; i++) {
            if (checkOpen.containsKey(inputDsta[i])) {
                count++;
            }
            else if (checkClose.containsKey(inputDsta[i])) {
                count--;
            }
        }
        boolean check = false;
        boolean result = true;
        if (count!=0) {
            result = false;
        }
        else {
            for (int i = 0; i < inputDsta.length; i++) {
            if (checkOpen.containsKey(inputDsta[i])) {
                open.addLast(inputDsta[i]);
            }
            else if (checkClose.containsKey(inputDsta[i])) {
                close.addFirst(inputDsta[i]);
            }
                if (checkOpen.get(open.getFirst())==checkClose.get(close.getFirst())) {
                    open.pollFirst();
                    close.pollLast();
                }
            }
        }
        
        
        System.out.println(count);
        System.out.println(open);
        System.out.println(close);
    }
}
